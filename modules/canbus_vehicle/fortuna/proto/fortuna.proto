syntax = "proto2";

package apollo.canbus;

import "modules/common_msgs/basic_msgs/vehicle_id.proto";
import "modules/common_msgs/chassis_msgs/chassis.proto";
import "modules/canbus_vehicle/lincoln/proto/lincoln.proto";


message Fortuna {
  enum Type {
    QIRUI_EQ_15 = 0;
    CHANGAN_RUICHENG = 1;
  }
  optional Type car_type = 1;                          // car type
  optional BasicInfo basic = 2;                        // basic info
  optional Safety safety = 3;                          // safety
  optional Gear gear = 4;                              // gear
  optional Ems ems = 5;                                // engine manager system
  optional Esp esp = 6;                                // Electronic Stability Program
  optional Gas gas = 7;                                // gas pedal
  optional Epb epb = 8;                                // Electronic parking brake
  optional Brake brake = 9;                            // brake pedal
  optional Deceleration deceleration = 10;             // deceleration
  optional VehicleSpd vehicle_spd = 11;                // vehicle speed
  optional Eps eps = 12;                               // Electronic Power Steering
  optional Light light = 13;                           // Light
  optional Battery battery = 14;                       // Battery info
  optional CheckResponseSignal check_response = 15;
  optional Surround surround = 17;                     // Surround information
  // Reserve fields for other vehicles
   optional double timestamp = 89;                      // timestamp
  optional Front_object_1 front_object_1 = 90; // report message
  optional Front_object_2 front_object_2 = 91; // report message
  optional Front_object_3 front_object_3 = 92; // report message
  optional Front_object_4 front_object_4 = 93; // report message
  optional Rear_object_1 rear_object_1 = 94; //report message
  optional Rear_object_2 rear_object_2 = 95; //report message
  optional Rear_object_3 rear_object_3 = 96; //report message
  optional Rear_object_4 rear_object_4 = 97; //report message
  optional Rear_object_5 rear_object_5 = 98; //report message
  optional Rear_object_6 rear_object_6 = 99; //report message
  optional Steering steering = 100; // report message
  optional apollo.common.VehicleID vehicle_id = 101;
}

//Sensor data messages

//Front Object_1
message Front_object_1 {
    
    enum Fused_stateType{
        NOT_FUSED = 0;
        OBJECT_FUSED = 1;
    }
    
    optional double rel_velocity_x = 1;
    optional double rel_pos_y = 2;
    optional double rel_pos_x = 3;
    optional int32 id = 4;
    optional Fused_stateType fused_state = 5;
}

//Front Object_2
message Front_object_2 {
    
    enum Fused_stateType{
        NOT_FUSED = 0;
        OBJECT_FUSED = 1;
    }
    
    optional double rel_velocity_x = 1;
    optional double rel_pos_y = 2;
    optional double rel_pos_x = 3;
    optional int32 id = 4;
    optional Fused_stateType fused_state = 5;
}

//Front Object_3
message Front_object_3 {
    
    enum Fused_stateType{
        NOT_FUSED = 0;
        OBJECT_FUSED = 1;
    }
    
    optional double rel_velocity_x = 1;
    optional double rel_pos_y = 2;
    optional double rel_pos_x = 3;
    optional int32 id = 4;
    optional Fused_stateType fused_state = 5;
}

//Front Object_4
message Front_object_4 {
    
    enum Fused_stateType{
        NOT_FUSED = 0;
        OBJECT_FUSED = 1;
    }
    
    optional double rel_velocity_x = 1;
    optional double rel_pos_y = 2;
    optional double rel_pos_x = 3;
    optional int32 id = 4;
    optional Fused_stateType fused_state = 5;
}


//Rear Object_1
message Rear_object_1 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}


//Rear Object_2
message Rear_object_2 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}
//Rear Object_3
message Rear_object_3 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}
//Rear Object_4
message Rear_object_4 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}
//Rear Object_5
message Rear_object_5 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}

//Rear Object_6
message Rear_object_6 {
    
    enum Rear_trackedType{
        OBJECT_TRACKED = 0;
        OBJECT_MEASURED = 1;
    }
    
    optional Rear_trackedType rear_tracked = 1;
    optional int32 rear_id = 2;
    optional double rear_pos_y = 3;
    optional double rear_rel_velocity_x = 4;
    optional double rear_pos_x = 5;
}


//Steering message
message Steering {
    
    enum Steering_signType{
        STEERING_LEFT = 0;
        STEERING_RIGHT = 1; 
    }

    optional Steering_signType steering_wheel_angle_sign = 1;
    optional Steering_signType steering_wheel_speed_sign = 2;
    optional Steering_signType steering_wheel_torque_sign = 3;
    optional double steering_wheel_torque = 4;
    optional double steering_wheel_angle = 5;
    optional double steering_wheel_speed = 6;
}


